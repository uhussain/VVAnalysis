import logging
from rootpy import log as rlog; rlog = rlog["/trueDistributions"]
# don't show most silly ROOT messages
logging.basicConfig(level=logging.WARNING)
rlog["/ROOT.TUnixSystem.SetDisplay"].setLevel(rlog.ERROR)

from rootpy.plotting import Canvas
from rootpy.plotting.utils import draw

from PlotTools import PlotStyle as _Style
from PlotTools import makeLegend, makeErrorBand
from Utilities import deltaRString, deltaPhiString
from Analysis.setupStandardSamples import genZZSamples

from os import makedirs as _mkdir
from os.path import join as _join
from os.path import isdir as _isdir
from os.path import exists as _exists


plotDir = '/afs/cern.ch/user/n/nawoods/www/trueDistributions'
inMC = 'uwvvNtuples_mc_23mar2017'

_style = _Style()

channels = ['eeee','eemm', 'mmmm']

# set up variables, selection, binnings etc.
# (jet-related variables and selections done later)
_variables = {
    'pt' : {c:'Pt' for c in channels},
    'mass' : {c:'Mass' for c in channels},
    'eta' : {c:'abs(Eta)' for c in channels},
    'zHigherPt' : {
        'eeee' : ['e1_e2_Pt', 'e3_e4_Pt'],
        'mmmm' : ['m1_m2_Pt', 'm3_m4_Pt'],
        'eemm' : ['e1_e2_Pt','m1_m2_Pt']
        },
    'zLowerPt' : {
        'eeee' : ['e1_e2_Pt', 'e3_e4_Pt'],
        'mmmm' : ['m1_m2_Pt', 'm3_m4_Pt'],
        'eemm' : ['e1_e2_Pt','m1_m2_Pt']
        },
    'zPt' : {
        'eeee' : ['e1_e2_Pt', 'e3_e4_Pt'],
        'mmmm' : ['m1_m2_Pt', 'm3_m4_Pt'],
        'eemm' : ['e1_e2_Pt','m1_m2_Pt']
        },
    'deltaPhiZZ' : {
        'eeee' : 'abs({}(e1_e2_Phi, e3_e4_Phi))'.format(deltaPhiString()),
        'eemm' : 'abs({}(e1_e2_Phi, m1_m2_Phi))'.format(deltaPhiString()),
        'mmmm' : 'abs({}(m1_m2_Phi, m3_m4_Phi))'.format(deltaPhiString()),
        },
    'deltaRZZ' : {
        'eeee' : '{}(e1_e2_Eta, e1_e2_Phi, e3_e4_Eta, e3_e4_Phi)'.format(deltaRString()),
        'eemm' : '{}(e1_e2_Eta, e1_e2_Phi, m1_m2_Eta, m1_m2_Phi)'.format(deltaRString()),
        'mmmm' : '{}(m1_m2_Eta, m1_m2_Phi, m3_m4_Eta, m3_m4_Phi)'.format(deltaRString()),
        },
    'l1Pt' : {
        'eeee' : 'max(e1Pt, e3Pt)',
        'eemm' : 'max(e1Pt, m1Pt)',
        'mmmm' : 'max(m1Pt, m3Pt)',
        },
    }

_binning = {
    'pt' : [25.*i for i in range(4)] + [100., 150., 200., 300.],
    'nJets' : [5,-0.5,4.5],
    'mass' : [100.] + [200.+50.*i for i in range(5)] + [500.,600.,800.],
    'eta' : [6,0.,6.],
    'zPt' : [i * 25. for i in range(7)] + [200., 300.],
    'zHigherPt' : [i * 25. for i in range(7)] + [200., 300.],
    'zLowerPt' : [i * 25. for i in range(7)] + [200., 300.],
    'deltaPhiZZ' : [0., 1.5] + [2.+.25*i for i in range(6)],
    'deltaRZZ' : [6, 0., 6.],
    'l1Pt' : [0.,15.,30.,40.,50.]+[60.+15.*i for i in range(9)]+[195.,225.],#[14,0.,210.],#[15, 0., 150.],
    }

_units = {
    'pt' : 'GeV',
    'mass' : 'GeV',
    'eta' : '',
    'zPt' : 'GeV',
    'zHigherPt' : 'GeV',
    'zLowerPt' : 'GeV',
    'deltaPhiZZ' : '',
    'deltaRZZ' : '',
    'l1Pt' : 'GeV',
    }

_prettyVars = {
    'pt' : 'p_T^{\\text{ZZ}}',
    'mass' : 'm_{\\text{ZZ}}',
    'eta' : '\\eta_{\\text{ZZ}}',
    'zPt' : 'p_T^{\\text{Z}}',
    'zHigherPt' : 'p_T^{\\text{Z}_{\\text{lead}}}',
    'zLowerPt' : 'p_T^{\\text{Z}_{\\text{sublead}}}',
    'deltaPhiZZ' : '\\Delta \\phi_{\\text{Z}_1,\\text{Z}_2}',
    'deltaRZZ' : '\\Delta \\text{R}_{\\text{Z}_1,\\text{Z}_2}',
    'l1Pt' : 'p_{T}^{\\ell_1}',
    }

_xTitle = {}
_yTitle = {}
_yTitleNoNorm = {}
_yTitleTemp = '{prefix} \\frac{{d\\sigma_{{\\text{{fid}}}}}}{{d{xvar}}} {units}'
for var, prettyVar in _prettyVars.iteritems():
    xt = prettyVar
    if _units[var]:
        xt += ' \\, \\text{{[{}]}}'.format(_units[var])
        yt = _yTitleTemp.format(xvar=prettyVar,
                                prefix='\\frac{1}{\\sigma_{\\text{fid}}}',
                                units='\\, \\left[ \\frac{{1}}{{\\text{{{unit}}}}} \\right]'.format(unit=_units[var]))
        ytnn = _yTitleTemp.format(xvar=prettyVar, prefix='',
                                  units='\\, \\left[ \\frac{{\\text{{fb}}}}{{\\text{{{unit}}}}} \\right]'.format(unit=_units[var]))
    else:
        yt = _yTitleTemp.format(prefix='\\frac{1}{\\sigma_{\\text{fid}}}',
                                xvar=prettyVar, units='')
        ytnn = _yTitleTemp.format(prefix='', xvar=prettyVar, units='\\left[ \\text{fb} \\right]')

    _xTitle[var] = xt
    _yTitle[var] = yt
    _yTitleNoNorm[var] = ytnn

_selections = {
    'pt' : {c:'' for c in channels},
    'mass' : {c:'' for c in channels},
    'eta' : {c:'' for c in channels},
    'zPt' : {c:'' for c in channels},
    'zHigherPt' : {
        'eeee' : ['e1_e2_Pt > e3_e4_Pt', 'e1_e2_Pt < e3_e4_Pt'],
        'mmmm' : ['m1_m2_Pt > m3_m4_Pt', 'm1_m2_Pt < m3_m4_Pt'],
        'eemm' : ['e1_e2_Pt > m1_m2_Pt', 'e1_e2_Pt < m1_m2_Pt'],
        },
     'zLowerPt' : {
        'eeee' : ['e1_e2_Pt < e3_e4_Pt', 'e1_e2_Pt > e3_e4_Pt'],
        'mmmm' : ['m1_m2_Pt < m3_m4_Pt', 'm1_m2_Pt > m3_m4_Pt'],
        'eemm' : ['e1_e2_Pt < m1_m2_Pt', 'e1_e2_Pt > m1_m2_Pt'],
        },
    'deltaPhiZZ' : {c:'' for c in channels},
    'deltaRZZ' : {c:'' for c in channels},
    'l1Pt' : {c:'' for c in channels},
    }

_trueSelections = {
    v : {
        'eeee' : 'e1_e2_Mass > 60. && e3_e4_Mass > 60.',
        'eemm' : 'e1_e2_Mass > 60. && m1_m2_Mass > 60.',
        'mmmm' : 'm1_m2_Mass > 60. && m3_m4_Mass > 60.',
        } for v in _selections
    }

_legDefaults = {
    'textsize' : .025,
    'leftmargin' : 0.377,
    }
_legParams = {v:_legDefaults.copy() for v in _varList}
_legParams['deltaRZZ'] = {
    'textsize' : .015,
    'leftmargin' : .03,
    'rightmargin' : .47,
    'entryheight' : .023,
    'entrysep' : .007,
    }
_legParams['deltaPhiZZ']['leftmargin'] = 0.05
_legParams['deltaPhiZZ']['rightmargin'] = 0.32
_legParams['eta'] = _legParams['deltaEtajj'].copy()
_legParams['l1Pt']['topmargin'] = 0.06

_matrixNames = {
    'deltaRZZ' : 'dR.Z_0.25__NNLO_QCD',
    'deltaPhiZZ' : 'dphi.Z_0.25__NNLO_QCD',
    'mass' : 'm.ZZ_5.0__NNLO_QCD',
    'nJets' : 'n_jets__NNLO_QCD',
    'pt' : 'pT.ZZ_2.5__NNLO_QCD',
    }
_matrixXSecs = {
    '' : 17.5413,
    'up' : 17.1878,
    'dn' : 17.9555,
    }
_matrixPath = '/afs/cern.ch/user/k/kelong/www/ZZMatrixDistributions'


def _normalizeBins(h):
    binUnit = 1 # min(h.GetBinWidth(b) for b in range(1,len(h)+1))
    for ib in xrange(1,len(h)+1):
        w = h.GetBinWidth(ib)
        h.SetBinContent(ib, h.GetBinContent(ib) * binUnit / w)
        h.SetBinError(ib, h.GetBinError(ib) * binUnit / w)
        if h.GetBinError(ib) > h.GetBinContent(ib):
            h.SetBinError(ib, h.GetBinContent(ib))
    h.sumw2()

def _unnormalizeBins(h):
    binUnit = 1 # min(h.GetBinWidth(b) for b in range(1,len(h)+1))
    for ib in xrange(1,len(h)+1):
        w = h.GetBinWidth(ib)
        h.SetBinContent(ib, h.GetBinContent(ib) * w / binUnit)
        h.SetBinError(ib, h.GetBinError(ib) * w / binUnit)
        if h.GetBinError(ib) > h.GetBinContent(ib):
            h.SetBinError(ib, h.GetBinContent(ib))
    h.sumw2()


if not _exists(plotDir):
    _mkdir(plotDir)
elif not _isdir(plotDir):
    raise IOError("There is already some non-directory object called {}.".format(plotDir))

ana = 'smp'


pow = genZZSamples('zz', inMC, ana, 1000.)
mg5 = genZZSamples('zz', inMC, ana, 1000., amcatnlo=True)
