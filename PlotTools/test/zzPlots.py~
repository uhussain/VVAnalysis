
import logging
from rootpy import log as rlog; rlog = rlog["/zzPlots"]
# don't show most silly ROOT messages
logging.basicConfig(level=logging.WARNING)
rlog["/ROOT.TUnixSystem.SetDisplay"].setLevel(rlog.ERROR)

from rootpy.io import root_open
from rootpy.plotting import Canvas, Legend
from rootpy.plotting.utils import draw

from SampleTools import MCSample, DataSample, SampleGroup, SampleStack
from PlotTools import PlotStyle as _Style
from PlotTools import makeLegend, addPadBelow, makeRatio, fixRatioAxes
from Utilities import WeightStringMaker

from os import environ
from os import path as _path



test = False
inData = '/data/nawoods/ntuples/uwvvNtuples_data_23aug2016'
sampleIDMC = '/data/nawoods/ntuples/uwvvNtuples_data_23aug2016'

outdir = '/afs/cern.ch/user/n/nawoods/www/UWVVPlots/zz'
if test:
    outdir = '/afs/cern.ch/user/n/nawoods/www/UWVVPlots/test'

style = _Style()

lumi = 12900.

channels = ['eeee','eemm', 'mmmm']

puWeight = WeightStringMaker('puWeight')
fPU = root_open(_path.join(environ['zzt'], 'data', 'pileup', 
                           'pileup_MC_80x_271036-276811_69200.root'))
hPU = fPU.puweight
strPU = puWeight.makeWeightStringFromHist(hPU, 'nTruePU')

mcWeight = {
    'eeee' : 'e1EffScaleFactor * e2EffScaleFactor * e3EffScaleFactor * e4EffScaleFactor * {}'.format(strPU),
    'eemm' : 'e1EffScaleFactor * e2EffScaleFactor * m1EffScaleFactor * m2EffScaleFactor * {}'.format(strPU),
    'mmmm' : 'm1EffScaleFactor * m2EffScaleFactor * m3EffScaleFactor * m4EffScaleFactor * {}'.format(strPU),
    }



if test:
    qqZZByChan = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_test/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }
    qqZZByChan2P2F = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_test/2P2F/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }
    qqZZByChan3P1F = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_test/3P1F/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }
else:
    qqZZByChan = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }
    qqZZByChan2P2F = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp_2P2F/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }
    qqZZByChan3P1F = {
        c : MCSample('ZZTo4L', c, 
                     '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp_3P1F/ZZTo4L*.root', 
                     True, lumi) for c in channels
        }

qqZZ = SampleGroup('ZZTo4L', 'zz', qqZZByChan, True)
qqZZ2P2F = SampleGroup('ZZTo4L', 'zz', qqZZByChan2P2F, True)
qqZZ3P1F = SampleGroup('ZZTo4L', 'zz', qqZZByChan3P1F, True)

ggZZByChan = {}
ggZZByChan2P2F = {}
ggZZByChan3P1F = {}
if test:
    for c in channels:
        ggZZByFS = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_test/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan[c] = SampleGroup('GluGluZZ', c, ggZZByFS, True)
        ggZZByFS2P2F = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_test/2P2F/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan3P1F[c] = SampleGroup('GluGluZZ', c, ggZZByFS3P1F, True)
        ggZZByFS3P1F = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_test/3P1F/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan3P1F[c] = SampleGroup('GluGluZZ', c, ggZZByFS3P1F, True)
else:
    for c in channels:
        ggZZByFS = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan[c] = SampleGroup('GluGluZZ', c, ggZZByFS, True)
        ggZZByFS2P2F = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp_2P2F/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan2P2F[c] = SampleGroup('GluGluZZ', c, ggZZByFS2P2F, True)
        ggZZByFS3P1F = {
            fs : MCSample('GluGluZZTo{}'.format(fs), c, 
                          '/data/nawoods/ntuples/uwvvNtuples_mc_23aug2016/results_smp_3P1F/GluGluZZTo{}*.root'.format(fs),
                          True, lumi) for fs in ['4e', '4mu', '2e2mu']
            }
        ggZZByChan3P1F[c] = SampleGroup('GluGluZZ', c, ggZZByFS3P1F, True)

ggZZ = SampleGroup('GluGluZZ', 'zz', ggZZByChan, True)
ggZZ2P2F = SampleGroup('GluGluZZ', 'zz', ggZZByChan2P2F, True)
ggZZ3P1F = SampleGroup('GluGluZZ', 'zz', ggZZByChan3P1F, True)

stack = SampleStack('stack', 'z', [dy,tt])


dataByChan = {}
for c in channels:
    samplesByEra = {}
    if test:
        samplesByEra['test'] = DataSample('test', c, 
                                          '/data/nawoods/ntuples/singleZ_data_test/*.root',
                                          )
    else:
        for era in ['b','c','d']:
            samplesByEra['2016{}'.format(era)] = DataSample('data2016{}_{}'.format(era, c), c, 
                                                            '/data/nawoods/ntuples/singleZ_data2016{}_11aug2016/results/*.root'.format(era)
                                                            )


    dataByChan[c] = SampleGroup('data_{}'.format(c), c, samplesByEra)

data = SampleGroup('Data', 'z', dataByChan)


units = {
    'Mass' : 'GeV',
    'Eta' : '',
    'Phi' : '',
    'Pt' : 'GeV',
    'nJets' : '',
    'Iso' : '',
    'PVDXY' : 'cm',
    'PVDZ' : 'cm',
    'nvtx' : '',
    'SIP3D' : '',
    }

binning2l = {
    'Mass' : [60, 60., 120.],
    'Pt' : [60, 0., 300.],
    'Eta' : [48,-6.,6.],
    'Phi' : [24, -3.15,3.15],
    'nJets' : [6,-0.5,5.5],
    }

binning1l = {
    'Pt' : [50, 0., 150.],
    'Eta' : [20, -2.5, 2.5],
    'Phi' : [24, -3.15, 3.15],
    'Iso' : [8, 0., .4],
    'PVDXY' : [20, -.1, .1],
    'PVDZ' : [20, -.2, .2],
    'SIP3D' : [20, 0., 5.],
    }

vars2l = {}
vars2l['ze'] = {v : {'ee':v} for v in binning2l}
vars2l['zm'] = {v : {'mm':v} for v in binning2l}

vars2l['z'] = {v:{} for v in binning2l}
for v in binning2l:
    vars2l['z'][v].update(vars2l['ze'][v].copy())
    vars2l['z'][v].update(vars2l['zm'][v].copy())

vars1l = {}
vars1l['e'] = {v : {'ee':['e1'+v, 'e2'+v]} for v in binning1l}
vars1l['e']['Iso'] = {'ee':['e1ZZIso','e2ZZIso']}
vars1l['m'] = {v : {'mm':['m1'+v, 'm2'+v]} for v in binning1l}
vars1l['m']['Iso'] = {'mm':['m1ZZIso','m2ZZIso']}

vars1l['l'] = {v:{} for v in binning1l}
for v in binning1l:
    vars1l['l'][v].update(vars1l['e'][v].copy())
    vars1l['l'][v].update(vars1l['m'][v].copy())


for chan in ['z', 'ze', 'zm']:
    for varName, var in vars2l[chan].iteritems():
        print "Plotting {} {}".format(chan, varName)

        hStack = stack.makeHist(var, '', binning2l[varName], mcWeight)
        dataPts = data.makeHist(var, '', binning2l[varName], poissonErrors=True)
        
        # for ratio
        dataHist = data.makeHist(var, '', binning2l[varName])

        print "    data: {} MC: {:.2f}".format(dataHist.Integral(), hStack.Integral())
        print ''

        c = Canvas(1000,1000)

        leg = makeLegend(c, hStack, dataPts)

        pad1, pad2 = addPadBelow(c, .23)

        pad1.cd()
        (xaxis, yaxis), (xmin,xmax,ymin,ymax) = draw([hStack, dataPts], pad1, 
                                                     xtitle='{}'.format(varName)+(' ({})'.format(units[varName]) if units[varName] else ''), 
                                                     ytitle='Events')
        leg.Draw("same")

        pad2.cd()
        ratio, unity = makeRatio(dataHist, hStack)
        (ratioX, ratioY), ratioLimits = draw(ratio, pad2, ytitle='Data / MC', 
                                             xlimits=(xmin,xmax),
                                             ylimits=(0.7,1.3), ydivisions=5)
        unity.Draw("same")

        c.cd()
        pad1.Draw()
        pad2.Draw()

        fixRatioAxes(xaxis,yaxis,ratioX,ratioY, pad1.height, pad2.height)

        style.setCMSStyle(c, '', dataType='Preliminary', intLumi=lumi)
        c.Print('{}/{}{}.png'.format(outdir, chan, varName))

for chan in ['l', 'e', 'm']:
    for varName, var in vars1l[chan].iteritems():
        print "Plotting {} {}".format(chan, varName)

        hStack = stack.makeHist(var, '', binning1l[varName], mcWeight)
        dataPts = data.makeHist(var, '', binning1l[varName], poissonErrors=True)

        # for ratio
        dataHist = data.makeHist(var, '', binning1l[varName])

        print "    data: {} MC: {:.2f}".format(dataHist.Integral(), hStack.Integral())
        print ''

        c = Canvas(1000,1200)

        leg = makeLegend(c, hStack, dataPts)

        pad1, pad2 = addPadBelow(c, .23)

        pad1.cd()
        (xaxis, yaxis), (xmin,xmax,ymin,ymax) = draw([hStack, dataPts], pad1, 
                                                     xtitle='{}'.format(varName)+(' ({})'.format(units[varName]) if units[varName] else ''), 
                                                     ytitle='Leptons')
        leg.Draw("same")

        pad2.cd()
        ratio, unity = makeRatio(dataHist, hStack)
        (ratioX, ratioY), ratioLimits = draw(ratio, pad2, ytitle='Data / MC', 
                                             xlimits=(xmin,xmax),
                                             ylimits=(0.7,1.3), ydivisions=5)
        unity.Draw("same")

        c.cd()
        pad1.Draw()
        pad2.Draw()

        fixRatioAxes(xaxis,yaxis,ratioX,ratioY, pad1.height, pad2.height)

        style.setCMSStyle(c, '', dataType='Preliminary', intLumi=lumi)
        c.Print('{}/{}{}.png'.format(outdir, chan, varName))
                       
